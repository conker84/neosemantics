¦type¦qualified name¦signature¦description
¦procedure¦n10s.validation.shacl.dropShapes¦n10s.validation.shacl.dropShapes() :: (target :: STRING?, propertyOrRelationshipPath :: STRING?, param :: STRING?, value :: ANY?)¦n10s.validation.dropShapes() - list SHACL shapes loaded in the Graph
¦procedure¦n10s.validation.shacl.listShapes¦n10s.validation.shacl.listShapes() :: (target :: STRING?, propertyOrRelationshipPath :: STRING?, param :: STRING?, value :: ANY?)¦n10s.validation.listShapes() - list SHACL shapes loaded in the Graph
¦procedure¦n10s.validation.shacl.validate¦n10s.validation.shacl.validate() :: (focusNode :: ANY?, nodeType :: STRING?, shapeId :: STRING?, propertyShape :: STRING?, offendingValue :: ANY?, resultPath :: STRING?, severity :: STRING?, resultMessage :: STRING?)¦n10s.validation.shacl.validate() - runs SHACL validation on the whole graph.
¦procedure¦n10s.validation.shacl.validateSet¦n10s.validation.shacl.validateSet(nodeList = [] :: LIST? OF NODE?) :: (focusNode :: ANY?, nodeType :: STRING?, shapeId :: STRING?, propertyShape :: STRING?, offendingValue :: ANY?, resultPath :: STRING?, severity :: STRING?, resultMessage :: STRING?)¦n10s.validation.shacl.validateSet([nodeList]) - runs SHACL validation on selected nodes
¦procedure¦n10s.validation.shacl.validateTransaction¦n10s.validation.shacl.validateTransaction(createdNodes :: ANY?, createdRelationships :: ANY?, assignedLabels :: ANY?, removedLabels :: ANY?, assignedNodeProperties :: ANY?, removedNodeProperties :: ANY?, deletedRelationships :: ANY?, deletedNodes :: ANY?) :: (focusNode :: ANY?, nodeType :: STRING?, shapeId :: STRING?, propertyShape :: STRING?, offendingValue :: ANY?, resultPath :: STRING?, severity :: STRING?, resultMessage :: STRING?)¦n10s.validation.shacl.validateTransaction(createdNodes,createdRelationships,...) - runs SHACL validation in trigger context.
